Function profiling
==================
  Message: /home/guus/anaconda3/envs/pcntk_dev/lib/python3.12/site-packages/pymc/pytensorf.py:1039
  Time in 1000 calls to Function.__call__: 2.130170e-01s
  Time in Function.vm.__call__: 0.09009582697763108s (42.295%)
  Time in thunks: 0.06880927085876465s (32.302%)
  Total compilation time: 5.580428e+00s
    Number of Apply nodes: 20
    PyTensor rewrite time: 1.271432e+00s
       PyTensor validate time: 1.736828e-02s
    PyTensor Linker time (includes C, CUDA code generation/compiling): 4.301597053992737s
       C-cache preloading 1.721483e-02s
       Import time 3.042845e-03s
       Node make_thunk time 4.283003e+00s
           Node Composite{...}(0.1, intercept_sigma, -0.5, -6.44304731634831, Sum{axes=None}.0, Sum{axes=None}.0, Sum{axes=None}.0, sigma_intercept_mu_log__, Sum{axes=None}.0, Sum{axes=None}.0, Sum{axes=None}.0, -inf, 0.9189385332046727, 2.0, 0.0, mu_intercept_mu) time 4.242898e+00s
           Node ExpandDims{axis=0}(intercept_sigma) time 4.742275e-03s
           Node ExpandDims{axis=0}(All{axes=None}.0) time 4.265808e-03s
           Node Switch(ExpandDims{axis=0}.0, Composite{...}.1, [-inf]) time 2.772494e-03s
           Node Composite{...}(ExpandDims{axis=0}.0, CGemv{inplace}.0, y) time 2.685817e-03s

Time in all call to pytensor.grad() 4.239931e+00s
Time since pytensor import 260.947s
Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  42.5%    42.5%       0.029s       3.65e-06s     C     8000       8   pytensor.tensor.elemwise.Elemwise
  22.8%    65.2%       0.016s       7.84e-06s     C     2000       2   pytensor.tensor.elemwise.DimShuffle
  16.6%    81.8%       0.011s       1.90e-06s     C     6000       6   pytensor.tensor.math.Sum
  11.0%    92.8%       0.008s       7.56e-06s     C     1000       1   pytensor.tensor.blas_c.CGemv
   3.7%    96.5%       0.003s       2.56e-06s     C     1000       1   pytensor.tensor.math.All
   1.9%    98.4%       0.001s       1.32e-06s     C     1000       1   pytensor.tensor.basic.AllocEmpty
   1.6%   100.0%       0.001s       1.08e-06s     C     1000       1   pytensor.tensor.shape.Shape_i
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  27.4%    27.4%       0.019s       1.88e-05s     C     1000        1   Composite{...}
  22.8%    50.1%       0.016s       7.84e-06s     C     2000        2   ExpandDims{axis=0}
  16.6%    66.7%       0.011s       1.90e-06s     C     6000        6   Sum{axes=None}
  11.0%    77.7%       0.008s       7.56e-06s     C     1000        1   CGemv{inplace}
   3.7%    81.4%       0.003s       2.56e-06s     C     1000        1   All{axes=None}
   3.5%    84.9%       0.002s       1.20e-06s     C     2000        2   Composite{((-0.5 * sqr(i0)) - 0.9189385332046727)}
   3.2%    88.1%       0.002s       2.19e-06s     C     1000        1   Composite{((-0.5 * sqr((0.1 * i0))) - 3.221523658174155)}
   2.9%    91.0%       0.002s       2.01e-06s     C     1000        1   Composite{...}
   2.2%    93.2%       0.002s       1.53e-06s     C     1000        1   Switch
   2.0%    95.2%       0.001s       1.39e-06s     C     1000        1   Composite{(switch(gt(exp(i0), 0.0), (((-0.5 * sqr((i0 - 2.0))) - 0.9189385332046727) - i0), -inf) + i0)}
   1.9%    97.1%       0.001s       1.32e-06s     C     1000        1   AllocEmpty{dtype='float64'}
   1.6%    98.7%       0.001s       1.08e-06s     C     1000        1   Shape_i{0}
   1.3%   100.0%       0.001s       8.96e-07s     C     1000        1   Composite{((-0.5 * sqr((0.2 * i0))) - 2.5283764757095555)}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  27.4%    27.4%       0.019s       1.88e-05s   1000     4   Composite{...}(ExpandDims{axis=0}.0, CGemv{inplace}.0, y)
  13.9%    41.3%       0.010s       9.58e-06s   1000     3   ExpandDims{axis=0}(intercept_sigma)
  11.0%    52.3%       0.008s       7.56e-06s   1000     2   CGemv{inplace}(AllocEmpty{dtype='float64'}.0, 1.0, X, slope_sigma, 0.0)
   8.9%    61.1%       0.006s       6.09e-06s   1000     6   ExpandDims{axis=0}(All{axes=None}.0)
   4.0%    65.1%       0.003s       2.78e-06s   1000    18   Sum{axes=None}(sigma > 0)
   3.9%    69.0%       0.003s       2.66e-06s   1000     8   Sum{axes=None}(sigma > 0)
   3.7%    72.7%       0.003s       2.56e-06s   1000     5   All{axes=None}(Composite{...}.0)
   3.3%    76.0%       0.002s       2.24e-06s   1000    14   Sum{axes=None}(sigma > 0)
   3.2%    79.2%       0.002s       2.19e-06s   1000    17   Composite{((-0.5 * sqr((0.1 * i0))) - 3.221523658174155)}(mu_slope_mu)
   2.9%    82.1%       0.002s       2.01e-06s   1000    19   Composite{...}(0.1, intercept_sigma, -0.5, -6.44304731634831, Sum{axes=None}.0, Sum{axes=None}.0, Sum{axes=None}.0, sigma_intercept_mu_log__, Sum{axes=None}.0, Sum{axes=None}.0, Sum{axes=None}.0, -inf, 0.9189385332046727, 2.0, 0.0, mu_intercept_mu)
   2.5%    84.6%       0.002s       1.74e-06s   1000    12   Sum{axes=None}(sigma > 0)
   2.2%    86.9%       0.002s       1.53e-06s   1000     7   Switch(ExpandDims{axis=0}.0, Composite{...}.1, [-inf])
   2.0%    88.9%       0.001s       1.39e-06s   1000    15   Composite{(switch(gt(exp(i0), 0.0), (((-0.5 * sqr((i0 - 2.0))) - 0.9189385332046727) - i0), -inf) + i0)}(sigma_slope_mu_log__)
   1.9%    90.8%       0.001s       1.32e-06s   1000     1   AllocEmpty{dtype='float64'}(Shape_i{0}.0)
   1.8%    92.6%       0.001s       1.25e-06s   1000    13   Composite{((-0.5 * sqr(i0)) - 0.9189385332046727)}(offset_slope_mu)
   1.7%    94.3%       0.001s       1.14e-06s   1000    11   Composite{((-0.5 * sqr(i0)) - 0.9189385332046727)}(offset_intercept_mu)
   1.6%    95.8%       0.001s       1.08e-06s   1000     0   Shape_i{0}(X)
   1.5%    97.3%       0.001s       1.02e-06s   1000    16   Sum{axes=None}(sigma_slope_mu_log___logprob)
   1.4%    98.7%       0.001s       9.44e-07s   1000    10   Sum{axes=None}(sigma > 0)
   1.3%   100.0%       0.001s       8.96e-07s   1000     9   Composite{((-0.5 * sqr((0.2 * i0))) - 2.5283764757095555)}(slope_sigma)
   ... (remaining 0 Apply instances account for 0.00%%(0.00s) of the runtime)

Here are tips to potentially make your code run faster
                 (if you think of new ones, suggest them on the mailing list).
                 Test them first, as they are not guaranteed to always provide a speedup.
  - Try the PyTensor flag floatX=float32
  - Try installing amdlibm and set the PyTensor flag lib__amdlibm=True. This speeds up only some Elemwise operation.

Function profiling
==================
  Message: /home/guus/anaconda3/envs/pcntk_dev/lib/python3.12/site-packages/pymc/pytensorf.py:1023
  Time in 1000 calls to Function.__call__: 8.370522e+00s
  Time in Function.vm.__call__: 8.156596657070622s (97.444%)
  Time in thunks: 8.06821894645691s (96.388%)
  Total compilation time: 1.453927e+00s
    Number of Apply nodes: 34
    PyTensor rewrite time: 1.189070e+00s
       PyTensor validate time: 1.553661e-02s
    PyTensor Linker time (includes C, CUDA code generation/compiling): 0.25563602700276533s
       C-cache preloading 1.399617e-02s
       Import time 6.771319e-02s
       Node make_thunk time 2.353505e-01s
           Node Composite{((i2 * sqr((i0 * i1))) - i3)}(0.5, mu_sigma, -0.5, 1.6120857) time 1.448293e-02s
           Node Switch(ExpandDims{axis=0}.0, Composite{...}.1, [-inf]) time 1.200093e-02s
           Node Composite{switch(i4, (((-0.5 * sqr(((i0 - i1) / i2))) - 0.9189385) - i3), -inf)}(sigma, ExpandDims{axis=0}.0, ExpandDims{axis=0}.0, Log.0, Gt.0) time 1.150379e-02s
           Node Composite{(i2 + (i0 * i1))}(ExpandDims{axis=0}.0, offset_intercept_mu, ExpandDims{axis=0}.0) time 1.149441e-02s
           Node All{axes=None}(Composite{...}.0) time 1.073167e-02s

Time in all call to pytensor.grad() 0.000000e+00s
Time since pytensor import 37.541s
Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  62.9%    62.9%       5.075s       3.17e-04s     C    16000      16   pytensor.tensor.elemwise.Elemwise
  23.7%    86.6%       1.909s       6.36e-04s     C     3000       3   pytensor.tensor.subtensor.AdvancedSubtensor1
  11.4%    98.0%       0.922s       1.54e-04s     C     6000       6   pytensor.tensor.math.Sum
   1.1%    99.1%       0.089s       1.27e-05s     C     7000       7   pytensor.tensor.elemwise.DimShuffle
   0.8%    99.9%       0.066s       6.59e-05s     C     1000       1   pytensor.tensor.math.All
   0.1%   100.0%       0.006s       6.43e-06s     C     1000       1   pytensor.tensor.basic.MakeVector
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  52.4%    52.4%       4.231s       4.23e-03s     C     1000        1   Composite{...}
  23.7%    76.1%       1.909s       6.36e-04s     C     3000        3   AdvancedSubtensor1
   9.3%    85.4%       0.749s       7.49e-04s     C     1000        1   Sum{axis=1}
   8.3%    93.7%       0.669s       6.69e-04s     C     1000        1   Mul
   2.1%    95.8%       0.173s       3.46e-05s     C     5000        5   Sum{axes=None}
   1.7%    97.5%       0.137s       1.37e-04s     C     1000        1   Switch
   0.9%    98.4%       0.072s       1.44e-05s     C     5000        5   ExpandDims{axis=0}
   0.8%    99.2%       0.066s       6.59e-05s     C     1000        1   All{axes=None}
   0.2%    99.4%       0.017s       8.59e-06s     C     2000        2   ExpandDims{axes=[0, 1]}
   0.1%    99.6%       0.010s       4.88e-06s     C     2000        2   Composite{(i2 + (i0 * i1))}
   0.1%    99.7%       0.009s       2.85e-06s     C     3000        3   Composite{...}
   0.1%    99.8%       0.007s       2.44e-06s     C     3000        3   Composite{((i2 * sqr((i0 * i1))) - i3)}
   0.1%    99.8%       0.006s       6.43e-06s     C     1000        1   MakeVector{dtype='float32'}
   0.1%    99.9%       0.005s       2.71e-06s     C     2000        2   Composite{((-0.5 * sqr(i0)) - 0.9189385)}
   0.0%    99.9%       0.003s       2.82e-06s     C     1000        1   Composite{switch(i4, (((-0.5 * sqr(((i0 - i1) / i2))) - 0.9189385) - i3), -inf)}
   0.0%   100.0%       0.003s       2.52e-06s     C     1000        1   Gt
   0.0%   100.0%       0.002s       2.18e-06s     C     1000        1   Log
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  52.4%    52.4%       4.231s       4.23e-03s   1000    13   Composite{...}(AdvancedSubtensor1.0, y, AdvancedSubtensor1.0, Sum{axis=1}.0)
   9.3%    61.7%       0.749s       7.49e-04s   1000     6   Sum{axis=1}(Mul.0)
   8.3%    70.0%       0.669s       6.69e-04s   1000     5   Mul(X, AdvancedSubtensor1.0)
   8.3%    78.3%       0.667s       6.67e-04s   1000    12   AdvancedSubtensor1(sigma, batch_effect_0_data)
   7.9%    86.2%       0.636s       6.36e-04s   1000    11   AdvancedSubtensor1(Composite{(i2 + (i0 * i1))}.0, batch_effect_0_data)
   7.5%    93.7%       0.606s       6.06e-04s   1000     4   AdvancedSubtensor1(Composite{(i2 + (i0 * i1))}.0, batch_effect_0_data)
   2.0%    95.7%       0.160s       1.60e-04s   1000    17   Sum{axes=None}(sigma > 0)
   1.7%    97.4%       0.137s       1.37e-04s   1000    16   Switch(ExpandDims{axis=0}.0, Composite{...}.1, [-inf])
   0.8%    98.2%       0.066s       6.59e-05s   1000    14   All{axes=None}(Composite{...}.0)
   0.4%    98.6%       0.034s       3.43e-05s   1000    15   ExpandDims{axis=0}(All{axes=None}.0)
   0.2%    98.8%       0.014s       1.43e-05s   1000    22   ExpandDims{axis=0}(mu_sigma)
   0.2%    98.9%       0.013s       1.31e-05s   1000     9   ExpandDims{axis=0}(Composite{...}.0)
   0.2%    99.1%       0.012s       1.24e-05s   1000     2   ExpandDims{axes=[0, 1]}(Composite{...}.0)
   0.1%    99.2%       0.007s       6.52e-06s   1000     3   Composite{(i2 + (i0 * i1))}(ExpandDims{axes=[0, 1]}.0, offset_slope_mu, ExpandDims{axes=[0, 1]}.0)
   0.1%    99.3%       0.006s       6.43e-06s   1000    32   MakeVector{dtype='float32'}(sigma > 0, sigma_slope_mu_log___logprob, Sum{axes=None}.0, sigma > 0, sigma_intercept_mu_log___logprob, Sum{axes=None}.0, sigma > 0, sigma_sigma_log___logprob, Sum{axes=None}.0, Sum{axes=None}.0)
   0.1%    99.3%       0.006s       5.82e-06s   1000    30   Sum{axes=None}(sigma > 0)
   0.1%    99.4%       0.005s       5.44e-06s   1000     1   Composite{...}(sigma_slope_mu_log__, 0.33333334, 0.0, -inf, 1.3244038, -0.5)
   0.1%    99.5%       0.005s       5.29e-06s   1000     7   ExpandDims{axis=0}(mu_intercept_mu)
   0.1%    99.5%       0.005s       4.99e-06s   1000    19   ExpandDims{axis=0}(Composite{...}.0)
   0.1%    99.6%       0.005s       4.82e-06s   1000    31   Composite{((i2 * sqr((i0 * i1))) - i3)}(0.33333334, mu_slope_mu, -0.5, 2.017551)
   ... (remaining 14 Apply instances account for 0.42%(0.03s) of the runtime)

Here are tips to potentially make your code run faster
                 (if you think of new ones, suggest them on the mailing list).
                 Test them first, as they are not guaranteed to always provide a speedup.
  - Try installing amdlibm and set the PyTensor flag lib__amblibm=True. This speeds up only some Elemwise operation.
  - With the default gcc libm, exp in float32 is slower than in float64! Try PyTensor flag floatX=float64, or install amdlibm and set the pytensor flags lib__amblibm=True

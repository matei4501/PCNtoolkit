Function profiling
==================
  Message: /home/guus/anaconda3/envs/pcntk_dev/lib/python3.12/site-packages/pymc/pytensorf.py:1023
  Time in 1000 calls to Function.__call__: 1.538747e+01s
  Time in Function.vm.__call__: 15.200125718016352s (98.783%)
  Time in thunks: 15.140630960464478s (98.396%)
  Total compilation time: 7.867868e+00s
    Number of Apply nodes: 30
    PyTensor rewrite time: 3.672233e-01s
       PyTensor validate time: 5.171927e-03s
    PyTensor Linker time (includes C, CUDA code generation/compiling): 7.496467817996745s
       C-cache preloading 6.594869e-03s
       Import time 1.058304e-02s
       Node make_thunk time 7.489126e+00s
           Node MakeVector{dtype='float32'}(sigma > 0, sigma_slope_mu_log___logprob, Sum{axes=None}.0, sigma > 0, sigma_intercept_mu_log___logprob, Sum{axes=None}.0, sigma > 0, sigma_sigma_log___logprob, Sum{axes=None}.0, sigma > 0, sigma > 0, Sum{axes=None}.0) time 1.658761e+00s
           Node Composite{...}(sigma_sigma_log__, 0.0, -0.5, -inf, 0.2257914) time 1.549163e+00s
           Node Composite{...}(AdvancedSubtensor1.0, y, AdvancedSubtensor1.0, ExpandDims{axis=0}.0, Composite{...}.0, Composite{...}.1) time 1.520115e+00s
           Node Composite{...}(ExpandDims{axis=0}.0) time 1.416516e+00s
           Node Composite{((i1 * sqr(i0)) - i2)}(epsilon, -0.5, 0.9189385) time 1.305969e+00s

Time in all call to pytensor.grad() 2.775107e-01s
Time since pytensor import 83.529s
Class
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Class name>
  92.7%    92.7%      14.042s       8.78e-04s     C    16000      16   pytensor.tensor.elemwise.Elemwise
   5.9%    98.7%       0.900s       4.50e-04s     C     2000       2   pytensor.tensor.subtensor.AdvancedSubtensor1
   1.0%    99.7%       0.147s       2.93e-05s     C     5000       5   pytensor.tensor.math.Sum
   0.3%   100.0%       0.046s       7.66e-06s     C     6000       6   pytensor.tensor.elemwise.DimShuffle
   0.0%   100.0%       0.006s       6.38e-06s     C     1000       1   pytensor.tensor.basic.MakeVector
   ... (remaining 0 Classes account for   0.00%(0.00s) of the runtime)

Ops
---
<% time> <sum %> <apply time> <time per call> <type> <#call> <#apply> <Op name>
  92.5%    92.5%      14.007s       1.40e-02s     C     1000        1   Composite{...}
   5.9%    98.5%       0.900s       4.50e-04s     C     2000        2   AdvancedSubtensor1
   1.0%    99.4%       0.147s       2.93e-05s     C     5000        5   Sum{axes=None}
   0.3%    99.7%       0.046s       7.66e-06s     C     6000        6   ExpandDims{axis=0}
   0.0%    99.8%       0.006s       6.38e-06s     C     1000        1   MakeVector{dtype='float32'}
   0.0%    99.8%       0.004s       2.14e-06s     C     2000        2   Composite{((-0.5 * sqr(i0)) - 0.9189385)}
   0.0%    99.8%       0.004s       4.21e-06s     C     1000        1   Composite{...}
   0.0%    99.9%       0.004s       2.04e-06s     C     2000        2   Composite{((i2 * sqr((i0 * i1))) - i3)}
   0.0%    99.9%       0.003s       2.99e-06s     C     1000        1   Composite{...}
   0.0%    99.9%       0.003s       2.96e-06s     C     1000        1   Composite{(switch(ge(exp(i0), i2), ((i5 * sqr((i1 * exp(i0)))) - i4), i3) + i0)}
   0.0%    99.9%       0.003s       2.80e-06s     C     1000        1   Composite{...}
   0.0%    99.9%       0.003s       1.36e-06s     C     2000        2   Composite{((i1 * sqr(i0)) - i2)}
   0.0%    99.9%       0.002s       2.48e-06s     C     1000        1   Composite{(i2 + (i0 * i1))}
   0.0%   100.0%       0.002s       2.40e-06s     C     1000        1   Gt
   0.0%   100.0%       0.002s       2.39e-06s     C     1000        1   Composite{switch(i4, (((-0.5 * sqr(((i0 - i1) / i2))) - 0.9189385) - i3), -inf)}
   0.0%   100.0%       0.002s       2.00e-06s     C     1000        1   Log
   0.0%   100.0%       0.002s       1.83e-06s     C     1000        1   Composite{((i2 * sqr((i0 - i1))) - i3)}
   ... (remaining 0 Ops account for   0.00%(0.00s) of the runtime)

Apply
------
<% time> <sum %> <apply time> <time per call> <#call> <id> <Apply name>
  92.5%    92.5%      14.007s       1.40e-02s   1000     9   Composite{...}(AdvancedSubtensor1.0, y, AdvancedSubtensor1.0, ExpandDims{axis=0}.0, Composite{...}.0, Composite{...}.1)
   3.1%    95.6%       0.471s       4.71e-04s   1000     8   AdvancedSubtensor1(sigma, batch_effect_0_data)
   2.8%    98.5%       0.429s       4.29e-04s   1000     7   AdvancedSubtensor1(Composite{(i2 + (i0 * i1))}.0, batch_effect_0_data)
   0.9%    99.4%       0.138s       1.38e-04s   1000    10   Sum{axes=None}(y_logprob)
   0.1%    99.5%       0.021s       2.10e-05s   1000    17   ExpandDims{axis=0}(mu_sigma)
   0.1%    99.6%       0.008s       7.96e-06s   1000     5   ExpandDims{axis=0}(Composite{...}.0)
   0.0%    99.6%       0.007s       6.77e-06s   1000     2   ExpandDims{axis=0}(epsilon)
   0.0%    99.6%       0.006s       6.38e-06s   1000    28   MakeVector{dtype='float32'}(sigma > 0, sigma_slope_mu_log___logprob, Sum{axes=None}.0, sigma > 0, sigma_intercept_mu_log___logprob, Sum{axes=None}.0, sigma > 0, sigma_sigma_log___logprob, Sum{axes=None}.0, sigma > 0, sigma > 0, Sum{axes=None}.0)
   0.0%    99.7%       0.005s       4.54e-06s   1000    25   Sum{axes=None}(sigma > 0)
   0.0%    99.7%       0.004s       4.21e-06s   1000     1   Composite{...}(ExpandDims{axis=0}.0)
   0.0%    99.7%       0.004s       3.60e-06s   1000    14   ExpandDims{axis=0}(Composite{...}.0)
   0.0%    99.7%       0.003s       3.49e-06s   1000     3   ExpandDims{axis=0}(mu_intercept_mu)
   0.0%    99.8%       0.003s       3.34e-06s   1000    27   Composite{((i2 * sqr((i0 * i1))) - i3)}(0.5, mu_slope_mu, -0.5, 1.6120857)
   0.0%    99.8%       0.003s       3.13e-06s   1000     0   ExpandDims{axis=0}(delta)
   0.0%    99.8%       0.003s       2.99e-06s   1000     4   Composite{...}(sigma_intercept_mu_log__, 0.5, 0.0, -inf, 0.9189386, -0.5)
   0.0%    99.8%       0.003s       2.96e-06s   1000    26   Composite{(switch(ge(exp(i0), i2), ((i5 * sqr((i1 * exp(i0)))) - i4), i3) + i0)}(sigma_slope_mu_log__, 0.5, 0.0, -inf, 0.9189386, -0.5)
   0.0%    99.8%       0.003s       2.80e-06s   1000    13   Composite{...}(sigma_sigma_log__, 0.0, -0.5, -inf, 0.2257914)
   0.0%    99.9%       0.002s       2.49e-06s   1000    24   Composite{((-0.5 * sqr(i0)) - 0.9189385)}(offset_slope_mu)
   0.0%    99.9%       0.002s       2.48e-06s   1000     6   Composite{(i2 + (i0 * i1))}(ExpandDims{axis=0}.0, offset_intercept_mu, ExpandDims{axis=0}.0)
   0.0%    99.9%       0.002s       2.40e-06s   1000    15   Gt(ExpandDims{axis=0}.0, [0])
   ... (remaining 10 Apply instances account for 0.11%(0.02s) of the runtime)

Here are tips to potentially make your code run faster
                 (if you think of new ones, suggest them on the mailing list).
                 Test them first, as they are not guaranteed to always provide a speedup.
  - Try installing amdlibm and set the PyTensor flag lib__amblibm=True. This speeds up only some Elemwise operation.
  - With the default gcc libm, exp in float32 is slower than in float64! Try PyTensor flag floatX=float64, or install amdlibm and set the pytensor flags lib__amblibm=True
